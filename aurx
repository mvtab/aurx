#!/bin/bash

usage() {
	cat <<- EOF
		usage: ${EXECUTABLE_NAME} [OPERATION] [OPTION..] [PACKAGE..] 
		
		The Archlinux User Repository eXplorer.
		Every option can be set through environment variables but the explicit option has the highest priority.
		
		Operations:
		  install                   pretty safe option for installing custom sources.
		  remove                    remove packages from system and the package list.
		  update                    pretty safe option for installing default sources. (will overwrite and delete existent ones)
		  search                    query the AUR with specific criterias and keywords via RPC.
		  completion                generate completion for the specified shell.
		
		Options:
		  general:
		  -a, --all                 include all installed packages. (false)
		  -f, --force               forces the current operation, where appliable. (false)
		  -h, --help                display this information and exit.
		  -s, --source-path         work directory for builds and persistent information.(\${HOME}/.src)
		  -v, --verbosity           level of verbosity: 0 - none, 1 - stderr, 2 - all. (2)
		
		  install:
		  -c, --cleanup             delete sources after successful installs. (false)
		  -C, --clean-operation     delete sources after unsucessful installs. (false)
		  -M, --makepkg-args        args to give in to makepkg installs. ('-sirc')
		  -p, --only-pull           only pulls the repository from AUR. (false)
		  -V, --verify-versions     compare target versions to installed ones. (false)
		  -w, --wipe-existing       wipe eventually existing sources. (false)
		  -W, --overwrite-existing  can the existing sources be overwritten. (false)
		  -x, --comparison-criteria criteria to use when comparing packages. ("rpc")

		  remove:
		  -R, --remove-opts         opts to give in to pacman for removing package. ('-R')

		  search:
		  -r, --search-results      number of results to display from search queries. (20)
		  -S, --search-criteria     criteria to use in search queries. ("name")
		  -b, --sort-by             key to sort results by. ("popularity")
		  -o, --order-by            how to order search results. ("descending")
		  -O, --no-out-of-date      remove all out of date packages. (false)
		  -m, --maintained          only return maintained packages. (false)
		
		  update:
		  -B, --block-overwrite     don't allow overwriting existing sources. (false)
		  -k, --keep-sources        don't cleanup after successful updates. (false)
		  -K, --keep-failed-sources don't cleanup after unsuccessfulupdates. (false)
		  -M, --makepkg-args        args to give in to makepkg installs. ('-sirc')
		  -x, --comparison-criteria criteria to use when comparing packages. ("rpc")

		  completion:
		  -e, --executable-name     the name of the executable to be used for completion. ("\${0}")
		
		Environment variables:
		  Capitalized long option names with AURX_ prefix, for example: AURX_SEARCH_CRITERIA.
	EOF
}

print_error() {
	local GIVEN_ERROR="${1}"

	case "${GIVEN_ERROR}" in
		10 )
			echo "[!] Could not remove files for target: \"${SELECTED_PACKAGE}\"."
			echo "[i] Check file permissions."
			;;
		11 )
			echo "[!] Could not pull repository: \"${SELECTED_PACKAGE}\"."
			;;
		12 )
			echo "[!] Could not clone git repository of \"${SELECTED_PACKAGE}\"."
			;;
		13 )
			echo "[!] Could not build \"${SELECTED_PACKAGE}\"."
			;;
		14 )
			echo "[!] Could not write \"${SELECTED_PACKAGE}\" to the package_list."
			;;
		20 )
			echo "[!] Could not remove \"${SELECTED_PACKAGE}\" from system."
			;;
		21 )
			echo "[!] Could not remove \"${SELECTED_PACKAGE}\" from the package_list."
			;;
		30 )
			echo "[!] Could not update \"${SELECTED_PACKAGE}\"."
			;;
		40 )
			echo "[!] No search results found for \"${SELECTED_PACKAGE}\"."
			;;
		50 | 51 )
			echo "[-] getopt not working properly."
			;;
		52 )
			echo "[-] Unknown search criteria: \"${SEARCH_CRITERIA}\"."
			echo "[i] Possible options are: name, name-desc, maintainer, depends, makedepends, optdepends, checkdepends, suggest."
			;;
		53 )
			echo "[-] Unknown error while parsing options."
			;;
		54 )
			echo "[-] No operation selected. Possible options are: ${POSSIBLE_OPERATIONS[*]}."
			;;
		55 )
			echo "[-] Unknown operation: \"${CURRENT_OPERATION}\". Possible options are: ${POSSIBLE_OPERATIONS[*]}."
			;;
		56 )
			echo "[-] No packages selected and the current \"${CURRENT_OPERATION}\" operation requires it."
			;;
		57 )
			echo "[!] Can't install or update packages as root."
			;;
		58 )
			echo "[-] Unknown verbosity level \"${VERBOSITY}\"."
			echo "[i] Possible options are: 0 - nothing, 1 - stderr, 2 - all"
			;;
		59 )
			echo "[-] The following required packages are not installed: ${ABSENT_PACKAGES[*]}."
			;;
		60 )
			echo "[-] Shell type \"${SHELL_TYPE}\" is not supported."
			;;
		61 )
			echo "[-] Uknown error code ${ERROR_CODE} received."
			;;
		62 )
			echo "[-] Completion for \"${COMPLETION_TYPE}\" is not available."
			;;
		63 )
			echo "[-] pushd failed at \"${PWD}\"."
			;;
		64 )
			echo "[-] popd failed at \"${PWD}\"."
			;;
		65)
			echo "[-] Unknown sort-by value: \"${SORT_BY}\"."
			echo "[i] Possible options are: firstsubmitted, lastmodified, votes, popularity."
			;;
		66)
			echo "[-] Unknown order-by value: \"${ORDER_BY}\"."
			echo "[i] Possible options are: ascending, descending."
			;;
		67)
			echo "[-] Could not pull repository: \"${SELECTED_PACKAGE}\"."
			;;
		68)
			echo "[-] Unknown comparison criteria: \"${COMPARISON_CRITERIA}\"."
			echo "[i] Possible options are: pkgbuild, rpc."
			;;
		70)
			echo "[-] Could not find PKGBUILD for \"${SELECTED_PACKAGE}\" with comparison criteria \"pkgbuild\"."
			;;
		* )
			echo "[-] No error message found for error ${GIVEN_ERROR}."
			;;
	esac
}

aurx-completion() {
	local SHELL_TYPE="${1}"
	case "${SHELL_TYPE}" in
		bash )
			cat <<- EOS
				_aurx-completion() {
					local CURRENT_WORD="\${COMP_WORDS[COMP_CWORD]}"
					COMPREPLY=()
				        local POSSIBLE_OPERATIONS="${POSSIBLE_OPERATIONS[*]}"
				        local GENERAL_OPTIONS="${GENERAL_OPTIONS[*]}"
				        local INSTALL_OPTIONS="${INSTALL_OPTIONS[*]}"
				        local REMOVE_OPTIONS="${REMOVE_OPTIONS[*]}"
				        local UPDATE_OPTIONS="${UPDATE_OPTIONS[*]}"
				        local SEARCH_OPTIONS="${SEARCH_OPTIONS[*]}"
				        local COMPLETION_OPTIONS="${COMPLETION_OPTIONS[*]}"
				        local AVAILABLE_COMPLETIONS="${AVAILABLE_COMPLETIONS[*]}"
				        
				        if [[ \${CURRENT_WORD} == -* ]]; then
				                COMPREPLY=( \$(compgen -W "\${GENERAL_OPTIONS}" -- "\${CURRENT_WORD}") )
				                if [[ \${COMP_WORDS[*]} =~ " install " ]]; then
				                        COMPREPLY+=( \$(compgen -W "\${INSTALL_OPTIONS}" -- "\${CURRENT_WORD}") )
				                elif [[ \${COMP_WORDS[*]} =~ " remove " ]]; then
				                        COMPREPLY+=( \$(compgen -W "\${REMOVE_OPTIONS}" -- "\${CURRENT_WORD}") )
				                elif [[ \${COMP_WORDS[*]} =~ " update " ]]; then
				                        COMPREPLY+=( \$(compgen -W "\${UPDATE_OPTIONS}" -- "\${CURRENT_WORD}") )
				        	elif [[ \${COMP_WORDS[*]} =~ " search " ]]; then
				                        COMPREPLY+=( \$(compgen -W "\${SEARCH_OPTIONS}" -- "\${CURRENT_WORD}") )
				        	elif [[ \${COMP_WORDS[*]} =~ " completion " ]]; then
				                        COMPREPLY+=( \$(compgen -W "\${COMPLETION_OPTIONS}" -- "\${CURRENT_WORD}") )
				                fi
				        else
				                if [[ -z \$(echo \${COMP_WORDS[*]} \${POSSIBLE_OPERATIONS[*]} | tr " " "\n" | sort | uniq -D) ]]; then
				                        COMPREPLY=( \$(compgen -W "\${POSSIBLE_OPERATIONS}" -- "\${CURRENT_WORD}") )
				                elif [[ \${#CURRENT_WORD} -ge 3 ]] && [[ ! -z \$(echo \${COMP_WORDS[*]} " install search " | tr " " "\n" | sort | uniq -D) ]]; then
				                        COMPREPLY=( \$(compgen -W "\$(${EXECUTABLE_NAME} search --search-criteria suggest \${CURRENT_WORD} | jq -r '.[]' | tr '\n' ' ')" -- "\${CURRENT_WORD}") )
				                elif [[ ! -z \$(echo \${COMP_WORDS[*]} " remove update " | tr " " "\n" | sort | uniq -D) ]]; then
				                        COMPREPLY=( \$(compgen -W "\$(cat ${SOURCE_PATH:?Source path not defined.}/package_list | tr '\n' ' ')" -- "\${CURRENT_WORD}") )
				                elif [[ ! -z \$(echo \${COMP_WORDS[*]} " completion " | tr " " "\n" | sort | uniq -D) ]]; then
				                        COMPREPLY=( \$(compgen -W "\${AVAILABLE_COMPLETIONS}" -- "\${CURRENT_WORD}") )
				                fi
				        fi

				        for PLANNED_REPLY in \${COMPREPLY[*]}; do
				                if [[ \${COMP_WORDS[*]} =~ " \${PLANNED_REPLY} " ]]; then
				                        TEMP_COMPREPLY=\${COMPREPLY[*]}
				                        COMPREPLY=( \${TEMP_COMPREPLY//"\${PLANNED_REPLY}"/} )
				                fi
				        done
				        
				        return 0
				}
				complete -F _aurx-completion ${EXECUTABLE_NAME}
			EOS
			;;
	esac
}

compare-versions() {
	local TARGET_PACKAGE="${1}"

	local INSTALLED_VERSION
	INSTALLED_VERSION=$(sudo pacman -Qi "${TARGET_PACKAGE}" 2> /dev/null \
		| grep -e "Version" | awk '{ print $3 }')

	case "${COMPARISON_CRITERIA}" in
		pkgbuild )
			if [[ ! -f "${SOURCE_PATH:?Source path not defined.}"/"${TARGET_PACKAGE}"/PKGBUILD ]]; then
				print_error 70
				exit 70
			fi
			local LATEST_VERSION
			local PKGVER
			local PKGREL
			PKGVER=$(sed -n 's/pkgver=\(.*\)/\1/p' "${SOURCE_PATH:?Source path not defined.}"/"${TARGET_PACKAGE}/PKGBUILD")
			PKGREL=$(sed -n 's/pkgrel=\(.*\)/\1/p' "${SOURCE_PATH:?Source path not defined.}"/"${TARGET_PACKAGE}/PKGBUILD")
			LATEST_VERSION="${PKGVER}-${PKGREL}"
			;;
		rpc )
			local LATEST_VERSION
			LATEST_VERSION=$(curl \
				"https://aur.archlinux.org/rpc/v5/info?arg[]=${TARGET_PACKAGE}" 2> /dev/null \
				| jq -r .results.[0].Version)
			;;
		* )
			print_error 68
			exit 68
			;;
	esac

	if [[ "${LATEST_VERSION}" == "${INSTALLED_VERSION}" ]] && ! ${FORCE}; then
		return 1
	fi
	return 0
}

clone-git-repo() {
	local TARGET_PACKAGE="${1}"
	if ! pushd "${SOURCE_PATH:?Source path not defined.}" 1> /dev/null; then
		print_error 63
		exit 63
	fi
	git clone "https://aur.archlinux.org/${TARGET_PACKAGE}.git"
	if [[ -z $(ls "${SOURCE_PATH:?Source path not defined.}"/"${TARGET_PACKAGE}") ]]; then
		if ! popd 1> /dev/null; then
			print_error 64
			exit 64
		fi
		return 1
	fi
	if ! popd 1> /dev/null; then
		print_error 64
		exit 64
	fi
	return 0
}

pull-git-repo() {
	local TARGET_PACKAGE="${1}"
	if ! pushd "${SOURCE_PATH:?Source path not defined.}"/"${TARGET_PACKAGE}" 1> /dev/null; then
		print_error 63
		exit 63
	fi
	if ! git pull; then
		if ! popd 1> /dev/null; then
			print_error 64
			exit 64
		fi
		return 1
	fi
	if ! popd 1> /dev/null; then
		print_error 64
		exit 64
	fi
	return 0
}

build-makepkg-package() {
	local TARGET_PACKAGE="${1}"
	if ! pushd "${SOURCE_PATH:?Source path not defined.}"/"${TARGET_PACKAGE}" 1> /dev/null; then
		print_error 63
		exit 63
	fi
	if ! makepkg "${MAKEPKG_ARGS}"; then
		if ! popd 1> /dev/null; then
			print_error 64
			exit 64
		fi
		return 1
	fi
	if ! popd 1> /dev/null; then
		print_error 64
		exit 64
	fi
}

remove-from-system() {
	local TARGET_PACKAGE="${1}"
	if [[ $(sudo pacman -Qi "${TARGET_PACKAGE}" 2>/dev/null) ]]; then
		sudo pacman "${REMOVE_OPTS}" "${TARGET_PACKAGE}"
	else
		return 0
	fi
	if [[ $(sudo pacman -Qi "${TARGET_PACKAGE}" 2> /dev/null) ]]; then
		return 1
	fi
	return 0
}

remove-from-package-list() {
	local TARGET_PACKAGE="${1}"
	if grep -qe "^${TARGET_PACKAGE}$" "${SOURCE_PATH:?Source path not defined.}"/package_list; then
		sed -i "/^${TARGET_PACKAGE}$/d" "${SOURCE_PATH:?Source path not defined.}"/package_list
	else
		return 0
	fi
	if grep -qe "^${TARGET_PACKAGE}$" "${SOURCE_PATH:?Source path not defined.}"/package_list; then
		return 2
	fi
	return 0
}

write-package-list() {
	local TARGET_PACKAGE="${1}"
	if ! grep -qe "${TARGET_PACKAGE}" "${SOURCE_PATH:?Source path not defined.}"/package_list; then
		echo "${TARGET_PACKAGE}" | tee -a "${SOURCE_PATH:?Source path not defined.}"/package_list 1> /dev/null
	fi
	if ! grep -qe "${TARGET_PACKAGE}" "${SOURCE_PATH:?Source path not defined.}"/package_list; then
		return 1
	fi
	return 0
}

aur-rpc-search() {
	local TARGET_KEYWORD="${1}"
	local RESULTS
	RESULTS=$(curl "https://aur.archlinux.org/rpc/v5/search/${TARGET_KEYWORD}?by=${SEARCH_CRITERIA}" 2> /dev/null)
	RESULTS=$(echo "${RESULTS}" | jq -r ".results | sort_by(.${SORT_BY})")
	if [[ "${ORDER_BY}" == "descending" ]]; then
		RESULTS=$(echo "${RESULTS}" | jq -r 'reverse')
	fi
	if ${NO_OUT_OF_DATE}; then
		RESULTS=$(echo "${RESULTS}" | jq -r '[.[] | select(.OutOfDate == null)]')
	fi
	if ${MAINTAINED}; then
		RESULTS=$(echo "${RESULTS}" | jq -r '[.[] | select(.Maintainer != null)]')
	fi
	RESULTS=$(echo "${RESULTS}" | jq -r ".[:${SEARCH_RESULTS}]")
	RESULTS=$(echo "${RESULTS}" | \
		jq -r '.[] | "\(.Maintainer)/\(.Name) \(.Version): \(.NumVotes) Votes, \(.Popularity) Popularity \n\t\(.Description)"')
	if [[ -z "${RESULTS}" ]]; then
		return 1
	fi
	echo "${RESULTS}"
}

aur-rpc-suggest() {
	local TARGET_KEYWORD="${1}"
	local RESULTS
	RESULTS=$(curl \
		"https://aur.archlinux.org/rpc/v5/suggest/${TARGET_KEYWORD}" 2> /dev/null \
		| jq -r ".[:${SEARCH_RESULTS}]")
	echo "${RESULTS}"
}

install-aur-package() {
	local TARGET_PACKAGE="${1}"

	if ${VERIFY_VERSIONS}; then
		compare-versions "${TARGET_PACKAGE}" || return 0
	fi

	if [[ -d "${SOURCE_PATH:?Source path not defined.}"/"${TARGET_PACKAGE}" ]]; then
		if ${WIPE_EXISTING}; then
			rm -rf "${SOURCE_PATH:?Source path not defined.}"/"${TARGET_PACKAGE}" || return 10
		elif ${OVERWRITE_EXISTING} && [[ "${COMPARISON_CRITERIA}" == "rpc" ]]; then
			pull-git-repo "${TARGET_PACKAGE}" || return 11
		fi
	fi
	if [[ ! -d "${SOURCE_PATH:?Source path not defined.}"/"${TARGET_PACKAGE}" ]]; then
		clone-git-repo "${TARGET_PACKAGE}" || return 12
	fi

	if ${ONLY_PULL}; then
		return 0
	fi

	if build-makepkg-package "${TARGET_PACKAGE}"; then
		if ${CLEANUP}; then
			rm -rf "${SOURCE_PATH:?Source path not defined.}"/"${TARGET_PACKAGE}" || return 10
		fi
	else
		if ${CLEAN_OPERATION}; then
			rm -rf "${SOURCE_PATH:?Source path not defined.}"/"${TARGET_PACKAGE}" || return 10
		fi
		return 13
	fi
	
	write-package-list "${TARGET_PACKAGE}" || return 14

	return 0
}

remove-aur-package() {
	local TARGET_PACKAGE="${1}"

	remove-from-system "${TARGET_PACKAGE}" || return 20

	remove-from-package-list "${TARGET_PACKAGE}" || return 21

	return 0
}

update-aur-package() {
	local TARGET_PACKAGE="${1}"
	local VERIFY_VERSIONS=true

	if ! ${KEEP_SOURCES}; then
		local CLEANUP=true
	fi
	if ! ${KEEP_FAILED_SOURCES}; then
		local CLEAN_OPERATION=true
	fi
	if ! ${BLOCK_OVERWRITE}; then
		local OVERWRITE_EXISTING=true
	fi

	install-aur-package "${TARGET_PACKAGE}" || return 30

	return 0
}

search-aur-package() {
	local TARGET_KEYWORD=${1}

	case "${SEARCH_CRITERIA}" in
		name | name-desc | maintainer | depends | makedepends | optdepends | checkdepends )
			aur-rpc-search "${TARGET_KEYWORD}" || return 40
			;;
		suggest )
			aur-rpc-suggest "${TARGET_KEYWORD}"
			;;
		* )
			print_error 52
			exit 52
			;;
	esac

	return 0
}


getopt --test 1> /dev/null && true
if [[ ${?} -ne 4 ]]; then
	print_error 50
	exit 50
fi

# Metadata.
POSSIBLE_OPERATIONS=("install" "remove" "update" "search" "completion")
GENERAL_OPTIONS=("-a" "--all" "-f" "--force" "-h" "--help" "-s" "--source-path" "-v" "--verbosity")
INSTALL_OPTIONS=("-c" "--cleanup" "-C" "--clean-operation" "-p" "--only-pull" "-x" "--comparison-criteria" "-w" "--wipe-existing" "-W" "--overwrite-existing" "-M" "--makepkg-args" "-V" "--verify-versions")
REMOVE_OPTIONS=("-R" "--remove-opts")
UPDATE_OPTIONS=("-k" "--keep-sources" "-K" "--keep-failed-sources" "-B" "--block-overwrite" "-x" "--comparison-criteria" "-M" "--makepkg-args")
SEARCH_OPTIONS=("-r" "--search-results" "-S" "--search-criteria" "-b" "--sort-by" "-o" "--order-by" "-O" "--no-out-of-date" "-m" "--maintained")
COMPLETION_OPTIONS=("-e" "--executable-name")
AVAILABLE_COMPLETIONS=("bash")

# Variables.
ALL=${AURX_ALL:-false}
BLOCK_OVERWRITE=${AURX_BLOCK_OVERWRITE:-false}
CLEANUP=${AURX_CLEANUP:-false}
CLEAN_OPERATION=${AURX_CLEAN_OPERATION:-false}
COMPARISON_CRITERIA=${AURX_COMPARISON_CRITERIA:-rpc}
EXECUTABLE_NAME=${AURX_EXECUTABLE_NAME:-${0}}
FORCE=${AURX_FORCE:-false}
KEEP_SOURCES=${AURX_KEEP_SOURCES:-false}
KEEP_FAILED_SOURCES=${AURX_KEEP_FAILED_SOURCES:-false}
MAINTAINED=${AURX_MAINTAINED:-false}
MAKEPKG_ARGS=${AURX_MAKEPKG_ARGS:--sirc}
NO_OUT_OF_DATE=${AURX_NO_OUT_OF_DATE:-false}
ONLY_PULL=${AURX_ONLY_PULL:-false}
ORDER_BY=${AURX_ORDER_BY:-descending}
OVERWRITE_EXISTING=${AURX_OVERWRITE_EXISTING:-false}
REMOVE_OPTS=${AURX_REMOVE_OPTS:--R}
SEARCH_CRITERIA=${AURX_SEARCH_CRITERIA:-name}
SEARCH_RESULTS=${AURX_SEARCH_RESULTS:-20}
SORT_BY=${AURX_SORT_BY:-popularity}
SOURCE_PATH="${AURX_SOURCE_PATH:-${HOME}/.src}"
VERBOSITY=${AURX_VERBOSITY:-2}
VERIFY_VERSIONS=${AURX_VERIFY_VERSIONS:-false}
WIPE_EXISTING=${AURX_WIPE_EXISTING:-false}

# Options.
LONGOPTS=''
LONGOPTS+='all,block-overwrite,cleanup,clean-operation,force,help,keep-sources,keep-failed-sources,maintained,no-out-of-date,only-pull,overwrite-existing,verify-versions,wipe-existing'
LONGOPTS+=',comparison-criteria:,executable-name:,makepkg-args:,order-by:,remove-opts:,search-criteria:,search-results:,sort-by:,source-path:,verbosity:'
OPTIONS=''
OPTIONS+='aBcCfhkKmOpVwW'
OPTIONS+='b:e:M:o:r:R:s:S:v:x:'
if ! PARSED_OPTIONS=$(getopt --options="${OPTIONS}" --longoptions="${LONGOPTS}" --name "${0}" -- "${@}"); then
	print_error 51
	exit 51
fi

eval set -- "${PARSED_OPTIONS}"

while true; do
	case "${1}" in
		-a|--all )
			ALL=true
			shift
			;;
		-b|--sort-by )
			SORT_BY="${2}"
			if [[ ! " firstsubmitted lastmodified votes popularity " =~ ${SORT_BY} ]]; then
				print_error 65
				exit 65
			fi
			shift 2
			;;
		-B|--block-overwrite )
			BLOCK_OVERWRITE=true
			shift
			;;
		-c|--cleanup )
			CLEANUP=true
			shift
			;;
		-C|--clean-operation )
			CLEAN_OPERATION=true
			shift
			;;
		-e|--executable-name )
			EXECUTABLE_NAME="${2}"
			shift 2
			;;
		-f|--force )
			FORCE=true
			shift
			;;
		-h|--help )
			usage
			exit 0
			;;
		-k|--keep-sources )
			KEEP_SOURCES=true
			shift
			;;
		-K|--keep-failed-sources )
			KEEP_FAILED_SOURCES=true
			shift
			;;
		-m|--maintained )
			MAINTAINED=true
			shift
			;;
		-M|--makepkg-args )
			MAKEPKG_ARGS="${2}"
			shift 2
			;;
		-o|--order-by )
			ORDER_BY="${2}"
			if [[ ! " ascending descending " =~ ${ORDER_BY} ]]; then
				print_error 66
				exit 66
			fi
			shift 2
			;;
		-O|--no-out-of-date )
			NO_OUT_OF_DATE=true
			shift
			;;
		-p|--only-pull )
			ONLY_PULL=true
			shift
			;;
		-r|--search-results )
			SEARCH_RESULTS="${2}"
			shift 2
			;;
		-R|--remove-opts )
			REMOVE_OPTS="${2}"
			shift 2
			;;
		-s|--source-path )
			SOURCE_PATH="${2}"
			shift 2
			;;
		-S|--search-criteria )
			SEARCH_CRITERIA="${2}"
			if [[ ! " name name-desc maintainer depends makedepends optdepends checkdepends suggest " =~ ${SEARCH_CRITERIA} ]]; then
				print_error 52
				exit 52
			fi
			shift 2
			;;
		-v|--verbosity )
			VERBOSITY="${2}"
			shift 2
			;;
		-V|--verify-versions )
			VERIFY_VERSIONS=true
			shift
			;;
		-w|--wipe-existing )
			WIPE_EXISTING=true
			shift
			;;
		-W|--overwrite-existing )
			OVERWRITE_EXISTING=true
			shift
			;;
		-x|--comparison-criteria )
			COMPARISON_CRITERIA="${2}"
			if [[ ! " rpc pkgbuild " =~ ${COMPARISON_CRITERIA} ]]; then
				print_error 68
				exit 68
			fi
			shift 2
			;;
		-- )
			shift
			break
			;;
		* )
			print_error 53
			exit 53
			;;
	esac
done

# Input sanity checks.

# Current operation.
if [[ ${#} -eq 0 ]]; then
	print_error 54
	exit 54
fi
CURRENT_OPERATION="${1}"
if [[ ! "${POSSIBLE_OPERATIONS[*]}" =~ ${CURRENT_OPERATION} ]]; then
	print_error 55
	exit 55
fi
shift
if [[ ${#} -eq 0 ]] && ! ${ALL} && [[ " install remove search " =~ ${CURRENT_OPERATION} ]]; then
	print_error 56
	exit 56
fi

# Root + install/update.
if [[ ${UID} -eq 0 ]] && [[ " install update " =~ ${CURRENT_OPERATION} ]]; then
	print_error 57
	exit 57
fi

# Verbosity.
case "${VERBOSITY}" in
	0 ) 
		STDOUT_DESTINATION=/dev/null
		STDERR_DESTINATION=/dev/null
		;;
	1 )
		STDOUT_DESTINATION=/dev/null
		STDERR_DESTINATION=/dev/stderr
		;;
	2 )
		STDOUT_DESTINATION=/dev/stdout
		STDERR_DESTINATION=/dev/stderr
		;;
	* )
		print_error 58
		exit 58
		;;
esac

# Sort by.
case "${SORT_BY}" in
	firstsubmitted )
		SORT_BY="FirstSubmitted"
		;;
	lastmodified )
		SORT_BY="LastModified"
		;;
	votes )
		SORT_BY="NumVotes"
		;;
	popularity )
		SORT_BY="Popularity"
		;;
	* )
		print_error 65
		exit 65
		;;
esac

TARGET_PACKAGES=("${@}")
if ${ALL}; then
	while IFS= read -r TARGET_PACKAGE; do
		TARGET_PACKAGES+=( "${TARGET_PACKAGE}" )
	done < "${SOURCE_PATH:?Source path not defined.}"/package_list
fi

case "${CURRENT_OPERATION}" in
	install | update )
		REQUIRED_PACKAGES=('awk' 'curl' 'echo' 'git' 'grep' 'jq' 'makepkg' 'pacman' 'sed' 'tee' 'debugedit' 'fakeroot' 'strip')
		;;
	remove )
		REQUIRED_PACKAGES=('grep' 'pacman' 'sed')
		;;
	search | completion )
		REQUIRED_PACKAGES=('curl' 'echo' 'jq')
		;;
	* )
		print_error 55
		exit 55
		;;
esac		
ABSENT_PACKAGES=()
for REQUIRED_PACKAGE in "${REQUIRED_PACKAGES[@]}"; do
	if [[ ! $(command -v "${REQUIRED_PACKAGE}") ]]; then
		ABSENT_PACKAGES+=( "${REQUIRED_PACKAGE}" )
	fi
done
if [[ -n "${ABSENT_PACKAGES[*]}" ]]; then
	print_error 59
	exit 59
fi

if [[ "${CURRENT_OPERATION}" == completion ]]; then
	COMPLETION_TYPE="${TARGET_PACKAGES[0]}"
	if [[ "${AVAILABLE_COMPLETIONS[*]}" =~ ${COMPLETION_TYPE} ]]; then
		aurx-completion "${COMPLETION_TYPE}"
		exit 0
	else
		print_error 62
		exit 62
	fi
fi

if [[ ! -d "${SOURCE_PATH}" ]]; then
	mkdir -p "${SOURCE_PATH}"
	chmod 0600 "${SOURCE_PATH}"
fi
if [[ ! -f "${SOURCE_PATH}"/package_list ]]; then
	touch "${SOURCE_PATH}"/package_list
	chmod 0600 "${SOURCE_PATH}"/package_list
fi

for SELECTED_PACKAGE in "${TARGET_PACKAGES[@]}"; do
	"${CURRENT_OPERATION}"-aur-package "${SELECTED_PACKAGE}" 1> "${STDOUT_DESTINATION}" 2> "${STDERR_DESTINATION}"
	ERROR_CODE=${?}
	case "${ERROR_CODE}" in
		0 )
			;;
		10 | 11 | 12 | 13 | 14 | 20 | 21 | 30 | 40 )
			print_error ${ERROR_CODE}
			;;
		* )
			print_error 61
			exit ${ERROR_CODE}
			;;
	esac
done

